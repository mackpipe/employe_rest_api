<?php
/**
 * @file
 * ImportaciÃ³n de empleados desde API externa a estructura Drupal
 *
 * @author Alberto Chaves (mackpipe@gmail.com, https://github.com/mackpipe).
 */


/**
 * Implements hook_install().
 */
function employes_rest_api_install() {
  
	$terms_taxonomy=array('Salario bajo','Salario medio','Salario alto');

	__employes_rest_api_create_taxonomy('Tipo salario','tipo_salario', 'This taxonomy lists the types of salary of employees');
	
	__employes_rest_api_create_taxonomy_terms('tipo_salario',$terms_taxonomy);

	__employes_rest_api_create_node_type('Empleados','empleados','This is an node type employes for Api Rest');  

	__employes_rest_api_create_fields_node_type();

}

/**
 * Implements hook_uninstall().
 */
function employes_rest_api_uninstall() {
 
 	__employes_rest_api_delete_view('list_employes');

 	__employes_rest_api_delete_node_type('empleados');

	__employes_rest_api_delete_taxonomy_terms('tipo_salario');	
 
}

/**
 * Create a taxonomy
 */
function __employes_rest_api_create_taxonomy($name, $machine_name, $description) {
	
	$t = get_t();

	$taxonomy = (object) array(
		'name' => $name,
		'description' => $description,
		'machine_name' => $machine_name,
	);

	$status =taxonomy_vocabulary_save($taxonomy);

	$t_args = array('%name' => $name);
	if ($status == SAVED_UPDATED) { // update case
		drupal_set_message($t('The taxonomy %name has been updated.', $t_args));
	} 
	elseif ($status == SAVED_NEW) { // create case
		drupal_set_message($t('The taxonomy %name has been added.', $t_args));
		watchdog('node', 'Added taxonomy %name.', $t_args, WATCHDOG_NOTICE, l($t('view'), 'admin/structure/taxonomy')); 
	}
}

/**
 * Create taxonomy terms to taxonomy
 */
function __employes_rest_api_create_taxonomy_terms($machine_name,$terms){

	$taxonomy = taxonomy_vocabulary_machine_name_load($machine_name);

	foreach ($terms as $key => $value) {
		$term = (object) array(
			'name' => $value,
			'description' => 'This is term '.$value,
			'vid' => $taxonomy->vid,
		);

		taxonomy_term_save($term);
	}
}

/**
 * Create a node type
 */
function __employes_rest_api_create_node_type($name,$type,$description) {
	
	$t = get_t();

	// Define the node type.
	$node_type = array(
		'type' => $type,
		'name' => $t($name),
		'base' => 'node_content',
		'description' => $t($description),
		'body_label' => $t('Example Description')
	);

	$content_type = node_type_set_defaults($node_type);
	node_add_body_field($content_type);

	// Save the content type
	$status = node_type_save($content_type);
	// Replacement rule for the messages.
	$t_args = array('%name' => $content_type->name);
	if ($status == SAVED_UPDATED) { // update case
		drupal_set_message($t('The content type %name has been updated.', $t_args));
	} 
	elseif ($status == SAVED_NEW) { // create case
		drupal_set_message($t('The content type %name has been added.', $t_args));
		watchdog('node', 'Added content type %name.', $t_args, WATCHDOG_NOTICE, l($t('view'), 'admin/structure/types')); 
	}
}

/**
 * Create fiels node type
 */
function __employes_rest_api_create_fields_node_type(){
 
	$t = get_t();

	// Create a taxonomy field and use the taxonomy entity we created earlier
	$fields = array(
		'field_employes_salary_type' => array(
			'field_name' => 'field_employes_salary_type',
			'type' => 'taxonomy_term_reference',
			'label' => $t('Tipo de salario'),
			'settings' => array(
				'allowed_values' => array(
					array(
						'vocabulary' => 'tipo_salario',
						'parent' => 0
					)
				)
			)
		),
		'field_employes_name2' => array(
			'field_name' => 'field_employes_name2',
    		'type' => 'text',
    		'label' => $t('Nombre del empleado'),
		),
		'field_employes_age2' => array(
			'field_name' => 'field_employes_age2',
    		'type' => 'text',
    		'label' => $t('Edad'),
		),
		'field_employes_id_remote2' => array(
			'field_name' => 'field_employes_id_remote2',
    		'type' => 'text',
    		'label' => $t('Id Remoto'),
		)
	);

	foreach ($fields as $key => $field) {
		field_create_field($field);
	}

	// Add the field to the content type as a HTML select box.
	$instances = array(
		'field_employes_salary_type'=>array(
			'field_name' => 'field_employes_salary_type',
			'entity_type' => 'node',
			'bundle' => 'empleados',
			'label' => $t('Tipo de salario'),
			'description' => '',
			'required' => TRUE,
			'widget' => array(
				'type' => 'options_select',
				'weight' => 1,
			)
		),
		'field_employes_name2' => array(
			'field_name' => 'field_employes_name2',
			'entity_type' => 'node',
			'bundle' => 'empleados',
			'label' => $t('Nombre del empleado'),
			'description' => '',
			'required' => TRUE,	
		),
		'field_employes_age2' => array(
			'field_name' => 'field_employes_age2',
			'entity_type' => 'node',
			'bundle' => 'empleados',
			'label' => $t('Edad'),
			'description' => '',
			'required' => TRUE,	
		),
		'field_employes_id_remote2' => array(
			'field_name' => 'field_employes_id_remote2',
			'entity_type' => 'node',
			'bundle' => 'empleados',
			'label' => $t('Id Remoto'),
			'description' => 'Id del Empleado en el API',
			'required' => TRUE,	
		)
	);	

	foreach ($instances as $key => $instance) {
		field_create_instance($instance);
	}

}


/**
 * Delete node type
 */
function __employes_rest_api_delete_node_type($machine_name){

	$t = get_t();
	
	$sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
	$result = db_query($sql, array(':type' => $machine_name));
	$nids = array();
	foreach ($result as $row) {
		$nids[] = $row->nid;
	}
	// Delete all the nodes at once	
	node_delete_multiple($nids);
	// Delete our content type
		
	$fields_info = field_info_instances('node', $machine_name);
	foreach ($fields_info as $key => $value) {
		field_delete_field($key);
	}	

	node_type_delete($machine_name);

	$t_args = array('%name' => $machine_name);
	drupal_set_message($t('The content type %name has been deleted.', $t_args));
}

/**
 * Delete taxonomy terms of the taxonomy
 */
function __employes_rest_api_delete_taxonomy_terms($machine_name){
	$t = get_t();
	//Delete our taxonomy
	$vocab = taxonomy_vocabulary_machine_name_load($machine_name);
	taxonomy_vocabulary_delete($vocab->vid);

	$t_args = array('%name' => $machine_name);
	drupal_set_message($t('The taxonomy %name has been deleted.', $t_args));
}


/**
 * Delete view
 */
function __employes_rest_api_delete_view($machine_name){
	$t = get_t();
	//Delete view

	if ($view = views_get_view($machine_name)) {
		$view->delete();
	}  	

  	$t_args = array('%name' => $machine_name);
	drupal_set_message($t('The view %name has been deleted.', $t_args));
}



